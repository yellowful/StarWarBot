{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","id","name","height","mass","className","alt","src","CardList","robots","length","cardComponent","map","items","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","a","fetch","promiseFetch","json","temp","results","result","url","split","allRobots","searchData","target","value","randomArray","i","randomNumber","Math","floor","random","includes","push","randomRobots","toString","getData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eb5ef81a.chunk.js","sourcesContent":["import React from 'react';\nconst Card = (props) => {\n    const {id,name,height,mass} = props;\n//    debugger;\n    return(\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = 'robots' src = {`https://robohash.org/${id}?200x200`}></img>\n            <div>\n                <h2> {name} </h2>\n                <p> {height} cm </p>\n                <p> {mass} kg </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = ({robots}) => {\n    // if(true){\n    //     throw new Error('Noooooo')\n    // }\n\n    if (!robots.length){\n        return<h1 className = 'tc'>Loading</h1>\n    } else{        \n//        debugger;\n        const cardComponent = robots.map(\n            (items) => {\n                return (\n                    <Card key={items.id} id={items.id} name={items.name} height={items.height} mass={items.mass}/>\n                )\n            }\n        )\n\n            return (\n                <div>\n                    {cardComponent}\n                </div>\n            )\n    }\n};\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div>\n            <input\n            className = 'pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots' \n            onChange= { searchChange }\n            />\n        </div>\n        \n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError:false\n        }\n    }\n    \n    componentDidCatch(error,info){\n        this.setState({hasError:true})\n    }\n    \n    render(){\n        if (this.state.hasError === true) {\n            return <h2> Oooooops! There is something wrong!</h2>\n        } else { return this.props.children }\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n//import { robots } from './robots';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css';\n\n//最頂端的流程\nclass App extends Component {\n\n//設定初始值\nconstructor(){\n    super();\n    this.state = {\n        allRobots: []\n    }\n}\n\n//App載入後，第一個執行的流程\ncomponentDidMount(){\n    let randomArray = [];\n    //產生10個亂數\n    for(let i=0;i<10;i++){\n        let randomNumber = Math.floor(Math.random()*88);\n        if (!randomArray.includes(randomNumber)){\n            randomArray.push(randomNumber);\n        }\n    }\n    //抓這10個亂數的Star War的人物\n    const getData = async (randomArray) => {\n        let randomRobots = [];    \n        for await (let randomNumber of randomArray){\n                let promiseFetch = await fetch(`https://swapi.co/api/people/${randomNumber}/`);\n                let temp = await promiseFetch.json();\n                temp.id = randomNumber.toString()\n                randomRobots.push(await temp);\n        }\n        this.setState({allRobots:randomRobots});\n        //allRobots在這一行被更新\n    }\n    //執行\n    getData(randomArray);\n\n}\n\n//鍵盤打字時要執行的，這是自行定義的名稱\nonSearchChange = (event) => {\n    //必須要用arrow function這個ES6的語法\n    //否則this不會被正確bind住，會是undefined\n    let searchData = async (searchfield)=>{\n        const promiseFetch = await fetch(`https://swapi.co/api/people/?search=${searchfield}`);\n        let temp = await promiseFetch.json();\n        const {results} = await temp;\n        for await (let result of results){\n            result.id = await result.url.split('/')[5];\n        }\n        //這行必須放在async裡面，才會被正確的執行\n        //因為results是個promise，所以this.setState如果放在async外面，接受searchData所return的result\n        //將會更新為一個promise，不會再管result是不是會再更新了\n        //放這裏的話，this.setState就會等results更新時，才更新allRobots\n        this.setState({allRobots:results});\n    }\n    //鍵盤發生敲擊時，回傳的event會傳入\n    searchData(event.target.value);\n}\n\nrender(){\n    //當this.setState更新的時候，會重新render，allRobots就會被更新\n    const { allRobots } = this.state;\n            return(\n                <div className='tc'>\n                    <h1 className='f2'>RobotsFriends</h1>\n                    {/* \n                    React就是靠searchChange這個props把\n                    event從onSearchChange這個callback \n                    function傳回來。\n                    這裡所有的this都是指App的instance\n                    (class App產生的object)。\n                    */}\n                    <SearchBox searchChange = {this.onSearchChange}/>\n                    {/* 利用定義這個component，讓children有捲軸的功能 */}\n                    <Scroll>\n                        {/* 利用這個component有定義componentDidCatch()，來顯示children的錯誤訊息 */}\n                        <ErrorBoundry>\n                            {/* 利用robots這個props把更新後的allRobots資料傳下去 */}\n                            <CardList robots={ allRobots } />\n                        </ErrorBoundry>\n                    </Scroll>                \n                </div>)\n}\n\n\n\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n                \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}